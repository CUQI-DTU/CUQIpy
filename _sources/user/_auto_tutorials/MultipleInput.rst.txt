
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user/_auto_tutorials/MultipleInput.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_user__auto_tutorials_MultipleInput.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user__auto_tutorials_MultipleInput.py:


Multiple input model: bathtub demo
===================================

This is a demo for bathtub water temperature and volume model using CUQIpy. 
We have measurements of the temperature and volume of the water in the bathtub
and want to infer the temperature and volume of the hot water and the cold water
that were used to fill in the bathtub

.. GENERATED FROM PYTHON SOURCE LINES 12-14

Import libraries
----------------

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: Python


    import cuqi
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 19-24

Define the forward map
--------------------------

`h_v` is the volume of hot water, `h_t` is the temperature of hot water,
`c_v` is the volume of cold water, and `c_t` is the temperature of cold water.

.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: Python


    def forward_map(h_v, h_t, c_v, c_t): 
        # volume
        volume = h_v + c_v
        # temperature
        temp = (h_v * h_t + c_v * c_t) / (h_v + c_v)

        return np.array([volume, temp]).reshape(2,)








.. GENERATED FROM PYTHON SOURCE LINES 34-36

Define gradient functions with respect to the unknown parameters
-----------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-63

.. code-block:: Python



    # Define the gradient with respect to h_v
    def gradient_h_v(direction, h_v, h_t, c_v, c_t):
        return (
            direction[0]
            + (h_t / (h_v + c_v) - (h_v * h_t + c_v * c_t) / (h_v + c_v) ** 2)
            * direction[1]
        )

    # Define the gradient with respect to h_t
    def gradient_h_t(direction, h_v, h_t, c_v, c_t):
        return (h_v / (h_v + c_v)) * direction[1]

    # Define the gradient with respect to c_v
    def gradient_c_v(direction, h_v, h_t, c_v, c_t):
        return (
            direction[0]
            + (c_t / (h_v + c_v) - (h_v * h_t + c_v * c_t) / (h_v + c_v) ** 2)
            * direction[1]
        )

    # Define the gradient with respect to c_t
    def gradient_c_t(direction, h_v, h_t, c_v, c_t):
        return (c_v / (h_v + c_v)) * direction[1]









.. GENERATED FROM PYTHON SOURCE LINES 64-66

Define domain geometry and range geometry
---------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-76

.. code-block:: Python


    domain_geometry = (
        cuqi.geometry.Discrete(['h_v']),
        cuqi.geometry.Discrete(['h_t']),
        cuqi.geometry.Discrete(['c_v']),
        cuqi.geometry.Discrete(['c_t'])
    )

    range_geometry = cuqi.geometry.Discrete(['temperature','volume'])








.. GENERATED FROM PYTHON SOURCE LINES 77-79

Define the forward model object
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: Python


    model = cuqi.model.Model(
        forward=forward_map,
        gradient=(gradient_h_v, gradient_h_t, gradient_c_v, gradient_c_t),
        domain_geometry=domain_geometry,
        range_geometry=range_geometry
    )








.. GENERATED FROM PYTHON SOURCE LINES 88-90

Experiment with partial evaluation of the model
---------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 90-100

.. code-block:: Python


    print("\nmodel()\n", model())
    print("\nmodel(h_v = 50)\n", model(h_v=50))
    print("\nmodel(h_v = 50, h_t = 60)\n", model(h_v=50, h_t=60))
    print("\nmodel(h_v = 50, h_t = 60, c_v = 30)\n", model(h_v=50, h_t=60, c_v=30))
    print(
        "\nmodel(h_v = 50, h_t = 60, c_v = 30, c_t = 10)\n",
        model(h_v=50, h_t=60, c_v=30, c_t=10),
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    model()
     CUQI Model: _ProductGeometry(
                    Discrete[1]
                    Discrete[1]
                    Discrete[1]
                    Discrete[1]
                ) -> Discrete[2].
        Forward parameters: ['h_v', 'h_t', 'c_v', 'c_t'].

    model(h_v = 50)
     CUQI Model: _ProductGeometry(
                    Discrete[1]
                    Discrete[1]
                    Discrete[1]
                ) -> Discrete[2].
        Forward parameters: ['h_t', 'c_v', 'c_t'].

    model(h_v = 50, h_t = 60)
     CUQI Model: _ProductGeometry(
                    Discrete[1]
                    Discrete[1]
                ) -> Discrete[2].
        Forward parameters: ['c_v', 'c_t'].

    model(h_v = 50, h_t = 60, c_v = 30)
     CUQI Model: Discrete[1] -> Discrete[2].
        Forward parameters: ['c_t'].

    model(h_v = 50, h_t = 60, c_v = 30, c_t = 10)
     [80.   41.25]




.. GENERATED FROM PYTHON SOURCE LINES 101-103

Define prior distributions for the unknown parameters
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-111

.. code-block:: Python


    h_v_dist = cuqi.distribution.Uniform(0, 60, geometry=domain_geometry[0])
    h_t_dist = cuqi.distribution.Uniform(40, 70, geometry=domain_geometry[1])
    c_v_dist = cuqi.distribution.Uniform(0, 60, geometry=domain_geometry[2])
    c_t_dist = cuqi.distribution.TruncatedNormal(
        10, 2**2, 7, 15, geometry=domain_geometry[3]
    )








.. GENERATED FROM PYTHON SOURCE LINES 112-114

Define a data distribution
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 114-120

.. code-block:: Python


    data_dist = cuqi.distribution.Gaussian(
        mean=model(h_v_dist, h_t_dist, c_v_dist, c_t_dist),
        cov=np.array([[1**2, 0], [0, 0.5**2]])
    )








.. GENERATED FROM PYTHON SOURCE LINES 121-123

Define a joint distribution of prior and data distributions
---------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: Python


    joint_dist = cuqi.distribution.JointDistribution(
        data_dist,
        h_v_dist,
        h_t_dist,
        c_v_dist,
        c_t_dist
    )








.. GENERATED FROM PYTHON SOURCE LINES 133-135

Define the posterior distribution by setting the observed data
------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 135-140

.. code-block:: Python


    # Assume measured volume is 60 gallons and measured temperature is 38 degrees
    # celsius
    posterior = joint_dist(data_dist=np.array([60, 38]))








.. GENERATED FROM PYTHON SOURCE LINES 141-143

Experiment with conditioning the posterior distribution
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 143-152

.. code-block:: Python


    print("posterior", posterior)
    print("\nposterior(h_v_dist = 50)\n", posterior(h_v_dist=50))
    print("\nposterior(h_v_dist = 50, h_t_dist = 60)\n", posterior(h_v_dist=50, h_t_dist=60))
    print(
        "\nposterior(h_v_dist = 50, h_t_dist = 60, c_v_dist = 30)\n",
        posterior(h_v_dist=50, h_t_dist=60, c_v_dist=30),
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    posterior JointDistribution(
        Equation: 
            p(h_v_dist,h_t_dist,c_v_dist,c_t_dist|data_dist) ∝ L(h_v_dist,c_t_dist,h_t_dist,c_v_dist|data_dist)p(h_v_dist)p(h_t_dist)p(c_v_dist)p(c_t_dist)
        Densities: 
            data_dist ~ CUQI Gaussian Likelihood function. Parameters ['h_v_dist', 'h_t_dist', 'c_v_dist', 'c_t_dist'].
            h_v_dist ~ CUQI Uniform.
            h_t_dist ~ CUQI Uniform.
            c_v_dist ~ CUQI Uniform.
            c_t_dist ~ CUQI TruncatedNormal.
     )

    posterior(h_v_dist = 50)
     JointDistribution(
        Equation: 
            p(h_t_dist,c_v_dist,c_t_dist|data_dist,h_v_dist) ∝ L(c_t_dist,h_t_dist,c_v_dist|data_dist)p(h_t_dist)p(c_v_dist)p(c_t_dist)
        Densities: 
            data_dist ~ CUQI Gaussian Likelihood function. Parameters ['h_t_dist', 'c_v_dist', 'c_t_dist'].
            h_v_dist ~ EvaluatedDensity(-4.0943445622221)
            h_t_dist ~ CUQI Uniform.
            c_v_dist ~ CUQI Uniform.
            c_t_dist ~ CUQI TruncatedNormal.
     )

    posterior(h_v_dist = 50, h_t_dist = 60)
     JointDistribution(
        Equation: 
            p(c_v_dist,c_t_dist|data_dist,h_v_dist,h_t_dist) ∝ L(c_t_dist,c_v_dist|data_dist)p(c_v_dist)p(c_t_dist)
        Densities: 
            data_dist ~ CUQI Gaussian Likelihood function. Parameters ['c_v_dist', 'c_t_dist'].
            h_v_dist ~ EvaluatedDensity(-4.0943445622221)
            h_t_dist ~ EvaluatedDensity(-3.4011973816621555)
            c_v_dist ~ CUQI Uniform.
            c_t_dist ~ CUQI TruncatedNormal.
     )

    posterior(h_v_dist = 50, h_t_dist = 60, c_v_dist = 30)
     Posterior(
        Equation:
             p(c_t_dist|data_dist) ∝ L(c_t_dist|data_dist)p(c_t_dist)
        Densities:
            data_dist ~ CUQI Gaussian Likelihood function. Parameters ['c_t_dist'].
            c_t_dist ~ CUQI TruncatedNormal.
     )




.. GENERATED FROM PYTHON SOURCE LINES 153-157

Sample from the joint (posterior) distribution
------------------------------------------------------------

First define sampling strategy for Gibbs sampling

.. GENERATED FROM PYTHON SOURCE LINES 157-169

.. code-block:: Python


    sampling_strategy = {
        "h_v_dist": cuqi.sampler.MH(
            scale=0.2, initial_point=np.array([30])),
        "h_t_dist": cuqi.sampler.MALA(
            scale=0.6, initial_point=np.array([50])),
        "c_v_dist": cuqi.sampler.MALA(
            scale=0.6, initial_point=np.array([30])),
        "c_t_dist": cuqi.sampler.MALA(
            scale=0.6, initial_point=np.array([10])),
    }








.. GENERATED FROM PYTHON SOURCE LINES 170-171

Then create the sampler and sample the posterior distribution

.. GENERATED FROM PYTHON SOURCE LINES 171-180

.. code-block:: Python


    hybridGibbs = cuqi.sampler.HybridGibbs(
        posterior,
        sampling_strategy=sampling_strategy)

    hybridGibbs.warmup(100)
    hybridGibbs.sample(2000)
    samples = hybridGibbs.get_samples()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Warmup:   0%|          | 0/100 [00:00<?, ?it/s]    Warmup:  21%|██        | 21/100 [00:00<00:00, 207.07it/s]    Warmup:  42%|████▏     | 42/100 [00:00<00:00, 208.38it/s]    Warmup:  63%|██████▎   | 63/100 [00:00<00:00, 208.63it/s]    Warmup:  84%|████████▍ | 84/100 [00:00<00:00, 208.71it/s]    Warmup: 100%|██████████| 100/100 [00:00<00:00, 208.54it/s]
    Sample:   0%|          | 0/2000 [00:00<?, ?it/s]    Sample:   1%|          | 21/2000 [00:00<00:09, 209.89it/s]    Sample:   2%|▏         | 42/2000 [00:00<00:09, 209.24it/s]    Sample:   3%|▎         | 63/2000 [00:00<00:09, 209.36it/s]    Sample:   4%|▍         | 84/2000 [00:00<00:09, 209.24it/s]    Sample:   5%|▌         | 105/2000 [00:00<00:09, 209.43it/s]    Sample:   6%|▋         | 126/2000 [00:00<00:08, 209.33it/s]    Sample:   7%|▋         | 147/2000 [00:00<00:08, 209.19it/s]    Sample:   8%|▊         | 168/2000 [00:00<00:08, 209.16it/s]    Sample:   9%|▉         | 189/2000 [00:00<00:08, 208.83it/s]    Sample:  10%|█         | 210/2000 [00:01<00:08, 208.91it/s]    Sample:  12%|█▏        | 231/2000 [00:01<00:08, 209.13it/s]    Sample:  13%|█▎        | 252/2000 [00:01<00:08, 208.71it/s]    Sample:  14%|█▎        | 274/2000 [00:01<00:08, 209.61it/s]    Sample:  15%|█▍        | 296/2000 [00:01<00:08, 210.10it/s]    Sample:  16%|█▌        | 318/2000 [00:01<00:07, 210.79it/s]    Sample:  17%|█▋        | 340/2000 [00:01<00:07, 210.75it/s]    Sample:  18%|█▊        | 362/2000 [00:01<00:07, 210.45it/s]    Sample:  19%|█▉        | 384/2000 [00:01<00:07, 210.31it/s]    Sample:  20%|██        | 406/2000 [00:01<00:07, 209.74it/s]    Sample:  21%|██▏       | 427/2000 [00:02<00:07, 209.57it/s]    Sample:  22%|██▏       | 448/2000 [00:02<00:07, 209.29it/s]    Sample:  23%|██▎       | 469/2000 [00:02<00:07, 209.10it/s]    Sample:  24%|██▍       | 490/2000 [00:02<00:07, 208.85it/s]    Sample:  26%|██▌       | 511/2000 [00:02<00:07, 208.88it/s]    Sample:  27%|██▋       | 533/2000 [00:02<00:06, 209.63it/s]    Sample:  28%|██▊       | 554/2000 [00:02<00:06, 209.37it/s]    Sample:  29%|██▉       | 575/2000 [00:02<00:06, 209.03it/s]    Sample:  30%|██▉       | 596/2000 [00:02<00:06, 208.89it/s]    Sample:  31%|███       | 617/2000 [00:02<00:06, 208.37it/s]    Sample:  32%|███▏      | 638/2000 [00:03<00:06, 208.34it/s]    Sample:  33%|███▎      | 659/2000 [00:03<00:06, 208.65it/s]    Sample:  34%|███▍      | 680/2000 [00:03<00:06, 209.00it/s]    Sample:  35%|███▌      | 702/2000 [00:03<00:06, 209.54it/s]    Sample:  36%|███▌      | 723/2000 [00:03<00:06, 208.53it/s]    Sample:  37%|███▋      | 744/2000 [00:03<00:06, 208.44it/s]    Sample:  38%|███▊      | 765/2000 [00:03<00:05, 208.28it/s]    Sample:  39%|███▉      | 786/2000 [00:03<00:05, 208.38it/s]    Sample:  40%|████      | 807/2000 [00:03<00:05, 207.61it/s]    Sample:  41%|████▏     | 828/2000 [00:03<00:05, 207.76it/s]    Sample:  42%|████▏     | 849/2000 [00:04<00:05, 208.07it/s]    Sample:  44%|████▎     | 870/2000 [00:04<00:05, 208.28it/s]    Sample:  45%|████▍     | 891/2000 [00:04<00:05, 208.08it/s]    Sample:  46%|████▌     | 912/2000 [00:04<00:05, 208.24it/s]    Sample:  47%|████▋     | 933/2000 [00:04<00:05, 208.46it/s]    Sample:  48%|████▊     | 954/2000 [00:04<00:05, 208.71it/s]    Sample:  49%|████▉     | 975/2000 [00:04<00:04, 207.98it/s]    Sample:  50%|████▉     | 996/2000 [00:04<00:04, 208.34it/s]    Sample:  51%|█████     | 1017/2000 [00:04<00:04, 208.43it/s]    Sample:  52%|█████▏    | 1038/2000 [00:04<00:04, 208.38it/s]    Sample:  53%|█████▎    | 1059/2000 [00:05<00:04, 208.57it/s]    Sample:  54%|█████▍    | 1080/2000 [00:05<00:04, 208.27it/s]    Sample:  55%|█████▌    | 1101/2000 [00:05<00:04, 208.37it/s]    Sample:  56%|█████▌    | 1122/2000 [00:05<00:04, 208.13it/s]    Sample:  57%|█████▋    | 1143/2000 [00:05<00:04, 208.37it/s]    Sample:  58%|█████▊    | 1164/2000 [00:05<00:04, 208.65it/s]    Sample:  59%|█████▉    | 1185/2000 [00:05<00:03, 208.86it/s]    Sample:  60%|██████    | 1206/2000 [00:05<00:03, 208.91it/s]    Sample:  61%|██████▏   | 1227/2000 [00:05<00:03, 208.61it/s]    Sample:  62%|██████▏   | 1248/2000 [00:05<00:03, 208.77it/s]    Sample:  63%|██████▎   | 1269/2000 [00:06<00:03, 207.85it/s]    Sample:  64%|██████▍   | 1290/2000 [00:06<00:03, 208.25it/s]    Sample:  66%|██████▌   | 1311/2000 [00:06<00:03, 208.36it/s]    Sample:  67%|██████▋   | 1332/2000 [00:06<00:03, 207.20it/s]    Sample:  68%|██████▊   | 1353/2000 [00:06<00:03, 207.91it/s]    Sample:  69%|██████▊   | 1374/2000 [00:06<00:03, 208.23it/s]    Sample:  70%|██████▉   | 1396/2000 [00:06<00:02, 209.03it/s]    Sample:  71%|███████   | 1418/2000 [00:06<00:02, 209.65it/s]    Sample:  72%|███████▏  | 1439/2000 [00:06<00:02, 209.67it/s]    Sample:  73%|███████▎  | 1461/2000 [00:06<00:02, 210.15it/s]    Sample:  74%|███████▍  | 1483/2000 [00:07<00:02, 210.30it/s]    Sample:  75%|███████▌  | 1505/2000 [00:07<00:02, 210.62it/s]    Sample:  76%|███████▋  | 1527/2000 [00:07<00:02, 210.56it/s]    Sample:  77%|███████▋  | 1549/2000 [00:07<00:02, 210.51it/s]    Sample:  79%|███████▊  | 1571/2000 [00:07<00:02, 208.81it/s]    Sample:  80%|███████▉  | 1593/2000 [00:07<00:01, 209.24it/s]    Sample:  81%|████████  | 1615/2000 [00:07<00:01, 209.51it/s]    Sample:  82%|████████▏ | 1637/2000 [00:07<00:01, 209.86it/s]    Sample:  83%|████████▎ | 1659/2000 [00:07<00:01, 209.93it/s]    Sample:  84%|████████▍ | 1680/2000 [00:08<00:01, 209.93it/s]    Sample:  85%|████████▌ | 1702/2000 [00:08<00:01, 210.17it/s]    Sample:  86%|████████▌ | 1724/2000 [00:08<00:01, 210.48it/s]    Sample:  87%|████████▋ | 1746/2000 [00:08<00:01, 210.52it/s]    Sample:  88%|████████▊ | 1768/2000 [00:08<00:01, 210.46it/s]    Sample:  90%|████████▉ | 1790/2000 [00:08<00:00, 210.67it/s]    Sample:  91%|█████████ | 1812/2000 [00:08<00:00, 210.82it/s]    Sample:  92%|█████████▏| 1834/2000 [00:08<00:00, 210.67it/s]    Sample:  93%|█████████▎| 1856/2000 [00:08<00:00, 210.77it/s]    Sample:  94%|█████████▍| 1878/2000 [00:08<00:00, 210.99it/s]    Sample:  95%|█████████▌| 1900/2000 [00:09<00:00, 210.79it/s]    Sample:  96%|█████████▌| 1922/2000 [00:09<00:00, 209.86it/s]    Sample:  97%|█████████▋| 1944/2000 [00:09<00:00, 210.24it/s]    Sample:  98%|█████████▊| 1966/2000 [00:09<00:00, 210.40it/s]    Sample:  99%|█████████▉| 1988/2000 [00:09<00:00, 210.28it/s]    Sample: 100%|██████████| 2000/2000 [00:09<00:00, 209.23it/s]




.. GENERATED FROM PYTHON SOURCE LINES 181-183

Show results (mean and trace plots)
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 183-202

.. code-block:: Python


    # Compute mean values
    mean_h_v = samples['h_v_dist'].mean()
    mean_h_t = samples['h_t_dist'].mean()
    mean_c_v = samples['c_v_dist'].mean()
    mean_c_t = samples['c_t_dist'].mean()

    # Print mean values
    print(f"Mean h_v: {mean_h_v}, Mean h_t: {mean_h_t}, Mean c_v: {mean_c_v}, Mean c_t: {mean_c_t}")
    print("Measured volume:", 60)
    print("Mean predicted volume:", mean_h_v + mean_c_v)
    print()
    print("Measured temperature:", 38)
    print("Mean predicted temperature:", (mean_h_v * mean_h_t + mean_c_v * mean_c_t) / (mean_h_v + mean_c_v))

    # Plot trace of samples
    samples['h_v_dist'].plot_trace();
    samples['h_t_dist'].plot_trace();
    samples['c_v_dist'].plot_trace();
    samples['c_t_dist'].plot_trace();


.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_MultipleInput_001.png
         :alt: h_v, h_v
         :srcset: /user/_auto_tutorials/images/sphx_glr_MultipleInput_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_MultipleInput_002.png
         :alt: h_t, h_t
         :srcset: /user/_auto_tutorials/images/sphx_glr_MultipleInput_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_MultipleInput_003.png
         :alt: c_v, c_v
         :srcset: /user/_auto_tutorials/images/sphx_glr_MultipleInput_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_MultipleInput_004.png
         :alt: c_t, c_t
         :srcset: /user/_auto_tutorials/images/sphx_glr_MultipleInput_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Mean h_v: [30.6012947], Mean h_t: [64.38596412], Mean c_v: [29.38593915], Mean c_t: [10.87458958]
    Measured volume: 60
    Mean predicted volume: [59.98723386]

    Measured temperature: 38
    Mean predicted temperature: [38.1723534]

    array([[<Axes: title={'center': 'c_t'}>, <Axes: title={'center': 'c_t'}>]],
          dtype=object)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.481 seconds)


.. _sphx_glr_download_user__auto_tutorials_MultipleInput.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: MultipleInput.ipynb <MultipleInput.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: MultipleInput.py <MultipleInput.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: MultipleInput.zip <MultipleInput.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
